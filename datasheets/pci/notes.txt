*** Terminology

Posted Writes - A write transaction that does not wait for a write completion response to indicate success or failure of the write transaction.
Non-Posted Writes - A non-posted write requires that a bus transaction responds with a write completion response to indicate success or failure of the transaction.
In reference to memory bus accesses, a posted write is referred to as a posted memory write (PMW).

*** Endian
PCI bus is little endian. For processors that is big endian like PPC, it will have to swap the write values for it to show up correctly when writing to the PCI registers.

*** Config Header
Each PCI device will have a configuration header that has ID/Enable/Interrupt Enable/etc.
They are usually accessed via the PCI configuration read/write registers on a SOC (ARM/PPC/etc).
For x86, they can be accessed using inb/outb to the write port.

Each device will have a common set of configuration header, and then a type
field to differentiate further what the device is:

The header type field can be:
    0x0: a general device
    0x1: a PCI-to-PCI bridge
    0x2: a PCI-to-CardBus bridge.

The following fields are common to all config header:
Register    Offset  Bits 31-24  Bits 23-16  Bits 15-8   Bits 7-0
0x0     0x0     Device ID   Vendor ID
0x1     0x4     Status  Command
0x2     0x8     Class code  Subclass    Prog IF     Revision ID
0x3     0xC     BIST    Header type     Latency Timer   Cache Line Size 

For General Device header:

Registers:
Command [0x04] -
   Interrupt Disable (BIT10):
       Disable interrupt if set, if this is cleared the device can trigger an interrupt.
	   If the device triggers an interrupt but no device driver to handle it, it can trigger an interrupt storm which can makes the board hang, so for devices without a driver, set this bit.
   Bus Master (BIT2):
       If set to 1 the device can behave as a bus master; otherwise, the device can not generate PCI accesses.
   Memory Space (BIT1):
       If set to 1 the device can respond to Memory Space accesses; otherwise, the device's response is disabled.
   IOSPACE (BIT0)
       If set to 1 the device can respond to I/O Space accesses; otherwise, the device's response is disabled.

Status [0x06] -
   Interrupt Status (BIT3)
      Represents the state of the device's INTx# signal. If set to 1 and bit 10 of the Command register (Interrupt Disable bit) is set to 0 the signal will be asserted; otherwise, the signal will be ignored.

CardBus CIS Pointer [0x28]
Points to the Card Information Structure and is used by devices that share silicon between CardBus and PCI.

Max Latency [0x3f]
A read-only register that specifies how often the device needs access to the PCI bus (in 1/4 microsecond units).

Min Grant [0x3e]
A read-only register that specifies the burst period length, in 1/4 microsecond units, that the device needs (assuming a 33 MHz clock rate).

INT_LINE [0x3c]
	Interrupt Line: Specifies which input of the system interrupt controllers the device's interrupt pin is connected to and is implemented by any device that makes use of an interrupt pin. For the x86 architecture this register corresponds to the PIC IRQ numbers 0-15 (and not I/O APIC IRQ numbers) and a value of 0xFF defines no connection.	

INT_PIN [0x3d]
	Specifies which interrupt pin the device uses. Where a value of 0x1 is INTA#, 0x2 is INTB#, 0x3 is INTC#, 0x4 is INTD#, and 0x0 means the device does not use an interrupt pin.

*** Bus/Device/Function and Physical Location
The PCI "device" number is an arbitrary assignment that does not necessarily map to physical slots in any rational way.
Itâ€™s assigned at boot time.
Further, most motherboards do not number their slots in a human-visible way.

Need different way to match PCI devices than using the BDF value.
One way to match could be a combination of VID/DID + other PCI fields like interrupt line + etc
Depends on the setup

