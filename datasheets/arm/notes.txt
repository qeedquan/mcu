*** Cores

ARMv6 (ARM11 1136/1156/1176)
ARMv7 (Cortex A5/A7/A8/A9/A12/A15/A17)
ARMv8 (Cortex A32/A34/A35/A53/A57/A72/A73)
ARMv9 (Cortex X2/X3/X4/X925/X930)

*** APB

The Advanced Peripheral Bus (APB) (Part of AMBA)

The APB is designed to be a secondary bus to ASB, connected by a bridge (which limits the ASB loading). APB is a much simpler bus and has a low power focus:
data access is controlled by select and strobe only (i.e. no clock, and thereby reducing power)
almost zero-power consumption when bus is not in use
simple unpiplined interface, typical of that required by many simple peripheral macrocells.

*** Privilege Levels

PL0 - user mode
PL1 - kernel mode
PL2 - hypervisor mode

EL (exception levels corresponds to privilege levels, so EL0-ELx exists)

*** Interrupt controllers

ARM made several interrupt controllers

VIC/NVIC (PL190)
AITC
GIC (PL390) (V1/V2/V3)

VIC used in:
BCM (Raspberry PI 2 era)

NVIC used in:
Cortex-M0
Cortex-M3

GIC used in:
Cortex-R5 (PL-390)
Cortex-A15
Cortex-A53

*** CP15

CP15, the System Control coprocessor, provides control of many features of the core.
It can contain up to sixteen 32-bit primary registers.
Access to CP15 is privilege controlled and not all registers are available in User mode.

All system architecture functions are controlled by reading or writing a general purpose processor register (Rt) from or to a set of registers (CRn) located within Coprocessor 15.
The Op1, Op2, and CRm fields of the instruction can also be used to select registers or operations. 

Note: This is the ASM used for 32 bits, for 64 bit ARM, they use different instructions

MRC p15, Op1, Rt, CRn, CRm, Op2 ; read a CP15 register into an ARM register
MCR p15, Op1, Rt, CRn, CRm, Op2 ; write a CP15 register from an ARM register

*** VBAR (Part of CP15)

When the Security Extensions are implemented and high exception vectors are not selected, the Vector Base Address Register, VBAR,
provides the exception base address for exceptions that are not handled in Monitor mode, see Exception vectors and the exception base address.
The high exception vectors always have the base address 0xFFFF 0000 and are not affected by the value of VBAR.

The Secure copy of the VBAR holds the vector base address for the Secure state, described as the Secure exception base address
The Non-secure copy of the VBAR holds the vector base address for the Non-secure state, described as the Non-secure exception base address.

Vector_Base_Address, bits [31:5]
Bits [31:5] of the base address of the normal exception vectors. Bits [4:0] of an exception vector is the exception offset, see Table 10.3.

Bits [4:0]
Reserved, UNK/SBZP.

MRC p15,0,<Rt>,c12,c0,0    ; Read  CP15 Vector Base Address Register
MCR p15,0,<Rt>,c12,c0,0    ; Write CP15 Vector Base Address Register

*** Interrupt Types

# PPIs
A Private Peripheral Interrupt (PPI) identifies an interrupt source, such as a timer, that is private to the core, and which is independent of the same source for another core.
PPIs are typically used for peripherals that are tightly coupled to a particular core.
Interrupts that connect to the PPI inputs associated with one core, are only sent to that core.
Each core processes a PPI independently of other cores. The settings of a PPI are also independent for each core.

A PPI is unique to one core. However, the PPIs to other cores can have the same INTID.
Up to 16 PPIs can be recorded for each target core, where each PPI has a different INTID in the ID16-ID31 range.

# SPIs
A Shared Peripheral Interrupt (SPI) is generated by a peripheral that is accessible across the whole system such as a USB receiver, and which can connect to several cores.
SPIs are typically used for peripherals that are not tightly coupled to a specific core.

You can program each SPI to target either a particular core or any core. Activating an SPI on one core activates the SPI for all cores.
That is, the GIC-600AE allows at most one core to activate an SPI. The settings for each SPI are also shared between all cores.

# SGIs
Software Generated Interrupts (SGIs) are inter-processor interrupts, that is, interrupts generated from one core and sent to other cores.
Each core in the system processes an SGI independently of the other cores. The priority of an SGI, and other settings, are also independent for each core.
SGIs are generated by writing to System registers in the CPU interface of the core that generates the interrupt. SGIs are edge triggered.
Up to 16 SGIs can be recorded for each target core, where each SGI has a different INTID in the ID0-ID15 range.

# LPIs
Locality-specific Peripheral Interrupts (LPIs) are always message-based, and can be from a peripheral or from a PCIe root complex.
An LPI targets only one core. LPIs are generated when the peripheral writes to the ITS.
The ITS contains the registers to control the generation and maintenance of LPIs.
The ITS provides INTID translation, allowing peripherals to be owned directly by a virtual machine if an SMMU is also present for those peripherals.


